import math
import matplotlib.pyplot as plt

class Nucleus:
    def __init__(self, A: int, Z: int):
        """
        Инициализация основных значений атома
        """
        self.A = A  # Массовое число
        self.Z = Z  # Заряд ядра
        self.N = A - Z  # Число нейтронов в ядре

    def binding_energy_per_nucleon(self) -> float:
        """
        Вычисляет удельную энергию связи для атомного ядра
        """
        # Константы для формулы Вейцзеккера
        constants = {
            'a_v': 15.56,
            'a_s': 17.23,
            'a_c': 0.7,
            'a_a': 23.285,
            'delta_0': 12.0
        }

        # Коррекция на четность
        delta = 0
        if self.Z % 2 == 0 and self.N % 2 == 0:
            delta = +constants['delta_0'] * self.A ** (-3/4)
        elif self.Z % 2 == 1 and self.N % 2 == 1:
            delta = -constants['delta_0'] * self.A ** (-3/4)

        # Вычисление энергии связи
        binding_energy = (
            constants['a_v'] * self.A
            - constants['a_s'] * self.A ** (2/3)
            - constants['a_c'] * self.Z ** 2 / self.A ** (1/3)
            - constants['a_a'] * (self.A - 2 * self.Z) ** 2 / self.A
            + delta
        )

        return binding_energy / self.A  # Удельная энергия связи

    def atomic_mass(self) -> float:
        """
        Вычисляет массу атома (в атомных единицах массы)
        """
        # Массы частиц в а.е.м.
        particle_masses = {'m_p': 1.007276, 'm_n': 1.008665, 'm_e': 0.0005486}

        # Полная энергия связи
        E_bind = self.binding_energy_per_nucleon() * self.A

        # Масса ядра с учетом энергии связи
        mass_nucleus = (
            self.Z * particle_masses['m_p']
            + self.N * particle_masses['m_n']
            - E_bind / 931.5  # Перевод МэВ в а.е.м
        )

        # Добавляем массу электронов
        return mass_nucleus + self.Z * particle_masses['m_e']

    def nuclear_radius(self) -> float:
        """
        Вычисляет радиус ядра (в фемтометрах)
        """
        R_0 = 1.2  # фм
        return R_0 * self.A ** (1/3)

    def is_stable_to_beta_decay(self) -> bool:
        """
        Проверяет устойчивость ядра к бета-распаду
        """
        if min(self.A, self.Z, self.N) <= 0:
            return False
        N_over_Z = self.N / self.Z
        return 1 < N_over_Z < 1.6  # Примерный диапазон устойчивости

    def is_even_even_fission_possible(self) -> bool:
        """
        Проверяет, возможно ли деление ядра на два четно-четных осколка
        """
        return all(x % 2 == 0 for x in [self.A, self.Z, self.N])


# Тестируем класс и строим графики
if __name__ == '__main__':
    nuclei = [
        Nucleus(238, 92), Nucleus(239, 94), Nucleus(252, 98),
        Nucleus(135, 52), Nucleus(16, 8), Nucleus(60, 28)
    ]

    # Списки для построения графиков
    radii = []
    binding_energies = []
    atomic_numbers = []

    for nucleus in nuclei:
        radii.append(nucleus.nuclear_radius())
        binding_energies.append(nucleus.binding_energy_per_nucleon())
        atomic_numbers.append(nucleus.Z)

        # Вывод результатов расчётов
        print(
            f'Атом с Z={nucleus.Z}, A={nucleus.A} - '
            f'масса: {nucleus.atomic_mass():.4f} а.е.м, '
            f'радиус: {nucleus.nuclear_radius():.2f} фм, '
            f'удельная энергия связи: {nucleus.binding_energy_per_nucleon():.2f} МэВ/нуклон, '
            f'устойчивость к бета-распаду: {nucleus.is_stable_to_beta_decay()}, '
            f'возможно ли четно-четное деление: {nucleus.is_even_even_fission_possible()}')

    # Построение графиков
    def plot_graph(x, y, xlabel, ylabel, title, marker, color, label):
        plt.figure(figsize=[10, 5])
        plt.plot(x, y, marker=marker, color=color, label=label)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.title(title)
        plt.grid(True)
        plt.legend()
        plt.show()

    plot_graph(atomic_numbers, radii, 'Атомный номер Z', 'Радиус ядра (фм)',
               'Зависимость радиуса ядра от атомного номера Z', 'o', 'b', 'Радиус ядра')

    plot_graph(atomic_numbers, binding_energies, 'Атомный номер Z', 'Удельная энергия связи (МэВ/нуклон)',
               'Зависимость удельной энергии связи от атомного номера Z', 'x', 'r', 'Энергия связи')
